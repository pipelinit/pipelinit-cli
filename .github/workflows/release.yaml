name: Release new version

on: [ push ]

jobs:
  version_release:
    name: Define de release version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    outputs:
      version: test_release

  build_binaries:
    name: Build Binaries
    needs: "version_release"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        build_target: ["x86_64-unknown-linux-gnu",  "x86_64-pc-windows-msvc", "x86_64-apple-darwin"]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.14.0
      - name: Build Pipelinit binary
        env:
          BUILD_TARGET: ${{ matrix.build_target }}
          RELEASE_VERSION: "${{ needs.version_release.outputs.version }}"
        run: |
          cd cli
          deno run --unstable --allow-read --allow-write --allow-net --allow-env --allow-run build.ts
      - name: 'See result'
        run: 'ls -a cli/bin'
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ needs.version_release.outputs.version }}"
          path: "cli/bin/pipelinit-${{ needs.version_release.outputs.version }}-${{ matrix.build_target }}"

  publish_release:
    name: Publish Release
    needs: [ "version_release", "build_binaries" ]
    runs-on: ubuntu-latest
    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: "${{ needs.version_release.outputs.version }}"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: 'Test release'
          prerelease: true
          tag_name: test_release
          files: |
            *
